#!/usr/bin/env bash

######################################################################
# @Project      : sanctuary
# @File         : sanctuary
# @Description  : Bash script to bring up the Docker Compose services
#                 for the Sanctuary project. This script is designed
#                 to be easily expandable as more services are added
#                 to the project.
#
# @Author       : Alan Szmyt
# @Date         : 2024-08-22
# @Version      : 1.0
# @References   :
#   - https://www.gnu.org/software/bash/
#   - https://www.gnu.org/software/bash/manual/bash.html
#   - https://docs.docker.com/compose/cli-command/
#   - https://docs.docker.com/compose/compose-file/
#   - https://docs.docker.com/compose/reference/overview/
#   - http://redsymbol.net/articles/unofficial-bash-strict-mode/
#   - https://www.shellcheck.net/
#   - https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html
#   - https://tldp.org/LDP/abs/html/
#   - https://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html
#   - https://man7.org/linux/man-pages/man7/signal.7.html
#   - http://redsymbol.net/articles/bash-exit-traps/
#   - https://mywiki.wooledge.org/BashGuide/Practices
#   - https://bertvv.github.io/cheat-sheets/Bash.html
#   - https://google.github.io/styleguide/shellguide.html
######################################################################
set -o errexit   # abort on nonzero exitstatus
set -o nounset   # abort on unbound variable
set -o pipefail  # don't hide errors within pipes
IFS=$'\n\t'

# Built-In Variables
# For reference
# $0   name of the script
# $n   positional parameters to script/function
# $$   PID of the script
# $!    PID of the last command executed (and run in the background)
# $?   exit status of the last command  (${PIPESTATUS} for pipelined commands)
# $#   number of parameters to script/function
# $@  all parameters to script/function (sees arguments as separate word)
# $*    all parameters to script/function (sees arguments as single word)
# Note
# $*   is rarely the right choice.
# $@ handles empty parameter list and white-space within parameters correctly
# $@

# Function to setup Docker command with optional debug flags
setupdocker_command() {
    # Find the Docker executable path
    local docker_path
    docker_path=$(command -v docker)
    if [[ -z "${docker_path}" ]]; then
        echo "Docker is not installed or not in the PATH."
        return 1 # Exit the function with an error status
    fi

    echo "Docker found at: ${docker_path}"

    # Start constructing the Docker command
    local _docker_cmd="${docker_path}"

    # Check if debug is enabled via environment variable
    if [[ "${PROJECT_DEBUG:-0}" -eq 1 ]]; then
        echo "Enabling Docker debug mode."
        args=(--debug --log-level "debug")
        _docker_cmd="${_docker_cmd} ${args[*]}"
    fi

    # Export the docker command so it can be used globally in the script
    export docker_command="${_docker_cmd}"
}
setupdocker_command

# Function to ensure containerd is enabled and running
ensure_containerd_enabled() {
    echo "Checking the current status of containerd..."

    # Check if running on Docker Desktop or a Linux system with Docker Engine
    if [[ -f "/Applications/Docker.app/Contents/Resources/bin/docker" ]]; then
        # Docker Desktop (MacOS)
        echo "Docker Desktop detected."

        # Command to check if containerd is active in Docker Desktop
        # Docker Desktop should manage containerd automatically; manual intervention is not typical
        if ! ${docker_command} info | grep -q 'containerd'; then
            echo "Containerd appears to be inactive or not properly configured in Docker Desktop."
            echo "Please check Docker Desktop settings or restart Docker."
        else
            echo "Containerd is active in Docker Desktop."
        fi
    elif command -v systemctl &> /dev/null; then
        # Linux Docker Engine
        echo "Systemd found, assuming Linux environment with Docker Engine."

        # Check if containerd service is active
        if ! systemctl is-active --quiet containerd; then
            echo "Containerd is not active. Attempting to start containerd..."
            sudo systemctl start containerd

            # Enable containerd to start at boot
            sudo systemctl enable containerd
            echo "Containerd has been started and enabled."
        else
            echo "Containerd is already active and running."
        fi
    else
        echo "Neither Docker Desktop nor a standard Linux Docker Engine environment detected."
        echo "Manual verification required."
    fi
}

# Function to check and ensure Docker Swarm is initialized
ensure_docker_swarm() {
    if ! ${docker_command} info | grep -q 'Swarm: active'; then
        echo "Docker Swarm is not active. Initializing Docker Swarm..."
        docker swarm init || {
            echo "Failed to initialize Docker Swarm."
            exit 1
        }
        echo "Docker Swarm has been successfully initialized."
    else
        echo "Docker Swarm is already active."
    fi
}

# Function to check if the Docker buildx builder exists and create it if necessary
ensure_buildx_builder() {
    local _builder_name
    _builder_name="$1"

    if ${docker_command} buildx inspect "${_builder_name}" > /dev/null 2>&1; then
        echo "Builder '${_builder_name}' already exists. Setting it as the default builder."
    else
        echo "Builder '${_builder_name}' does not exist. Creating and setting it as the default builder."
        ${docker_command} buildx create \
            --name "${_builder_name}" \
            --node "${_builder_name}-node" \
            --driver "docker-container" \
            --driver-opt "default-load=true" \
            --use \
            --bootstrap
        echo "Builder '${_builder_name}' created and set as default."
    fi
    ${docker_command} buildx use "${_builder_name}"
}

# Call the function
# ensure_containerd_enabled

# Check and ensure the Docker Buildx builder
# ensure_buildx_builder "${BUILDX_BUILDER:-"container-builder"}"

# echo "Builder: $(${docker_command} buildx inspect --builder "${BUILDX_BUILDER:-"container-builder"}")"

# Check and ensure Docker Swarm is active
# ensure_docker_swarm

build_base_image() {
    docker compose \
        --file sanctuary.yml \
        --env-file sanctuary.env \
        --env-file containers/base/base.env \
        --parallel 1 \
        --ansi auto \
        --progress plain \
        build base
}

start_services() {
    # Array of services to bring up. Add more services here as needed.
    services=("tiledb")

    # Base Docker Compose command, broken into multiple lines for readability.
    cmd=(
        "${docker_command}" "compose"
        "--file" "sanctuary.yml"
        "--env-file" "sanctuary.env"
        "--env-file" "containers/base/base.env"
        "--env-file" "containers/redis/redis.env"
        "--env-file" "containers/tiledb/tiledb.env"
        "--env-file" "containers/minio/minio.env"
        "--parallel" "1"
        "--ansi" "auto"
        "up"
        "--build"
        "--force-recreate"
        "--remove-orphans"
    )
    # Add services to the command, with --no-deps to skip dependency services.
    for service in "${services[@]}"; do
        cmd+=("--no-deps" "${service}")
    done

    # Append any additional arguments passed to the script.
    cmd+=("$@")

    # Echo the final command for visibility.
    echo "Executing: ${cmd[*]}"

    # Execute the final command.
    "${cmd[@]}"
}

build_base_image
# echo "HELLO"

# printenv | sort


# if [[ "${TRACE-0}" == "1" ]];
