#!/usr/bin/env bash

######################################################################
# @Project      : sanctuary
# @File         : sanctuary
# @Description  : Bash script to bring up the Docker Compose services
#                 for the Sanctuary project. This script is designed
#                 to be easily expandable as more services are added
#                 to the project.
#
# @Author       : Alan Szmyt
# @Date         : 2024-08-22
# @Version      : 1.0
######################################################################
set -euox pipefail

# Export the DOCKER_BUILDKIT environment variable
export \
    DOCKER_BUILDKIT=1 \
    BUILDX_EXPERIMENTAL=1 \
    BUILDKIT_MULTI_PLATFORM=1 \
    PROJECT_CACHE_DIR="./.cache/buildx" \
    COMPOSE_DOCKER_CLI_BUILD=1 \
    DOCKER_DEFAULT_PLATFORM=linux/arm64 \
    COMPOSE_EXPERIMENTAL=1 \
    BUILDKIT_CACHE_MOUNT_NS="sanctuary-cache-ns"

# Function to check and ensure Docker Swarm is initialized
ensure_docker_swarm() {
    if ! docker info | grep -q 'Swarm: active'; then
        echo "Docker Swarm is not active. Initializing Docker Swarm..."
        docker swarm init || {
            echo "Failed to initialize Docker Swarm."
            exit 1
        }
        echo "Docker Swarm has been successfully initialized."
    else
        echo "Docker Swarm is already active."
    fi
}

# Function to check if the Docker buildx builder exists and create it if necessary
ensure_buildx_builder() {
    local _builder_name
    _builder_name="$1"

    if docker buildx inspect "${_builder_name}" > /dev/null 2>&1; then
        echo "Builder '${_builder_name}' already exists. Setting it as the default builder."
    else
        echo "Builder '${_builder_name}' does not exist. Creating and setting it as the default builder."
        docker buildx create \
            --name "${_builder_name}" \
            --driver docker-container \
            --use --bootstrap
        echo "Builder '${_builder_name}' created and set as default."
    fi
    docker buildx use "${_builder_name}"
}

# Check and ensure Docker Swarm is active
ensure_docker_swarm

# Check and ensure the Docker Buildx builder
ensure_buildx_builder "${BUILDX_BUILDER:-"container-builder"}"

echo "Builder: $(docker buildx inspect --builder "${BUILDX_BUILDER:-"container-builder"}")"

docker compose \
--file sanctuary.yml \
--env-file sanctuary.env \
--env-file containers/base/base.env \
--parallel 1 \
--ansi always \
build base

# Array of services to bring up. Add more services here as needed.
services=("tiledb")

# Base Docker Compose command, broken into multiple lines for readability.
cmd=(
  "docker" "compose"
  "--file" "sanctuary.yml"
  "--env-file" "sanctuary.env"
  "--env-file" "containers/base/base.env"
  "--env-file" "containers/redis/redis.env"
  "--env-file" "containers/tiledb/tiledb.env"
  "--env-file" "containers/minio/minio.env"
  "--parallel" "1"
  "--ansi" "always"
  "up"
  "--build"
  "--force-recreate"
  "--remove-orphans"
)

# Add services to the command, with --no-deps to skip dependency services.
for service in "${services[@]}"; do
  cmd+=("--no-deps" "${service}")
done

# Append any additional arguments passed to the script.
cmd+=("$@")

# Echo the final command for visibility.
echo "Executing: ${cmd[*]}"

# Execute the final command.
"${cmd[@]}"
